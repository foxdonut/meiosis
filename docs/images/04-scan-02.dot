digraph meiosisdocs {
  stream [shape="none", label="var update = stream();"]

  updateplus1 [shape="none", style="filled", fillcolor="yellow", label="update({ oper: \"add\", value: 1 })"]
  updateplus3 [shape="none", style="filled", fillcolor="yellow", label="update({ oper: \"times\", value: 2 })"]

  thestream [shape="plaintext", style="filled", fillcolor="lightblue", label=<
    <table border="1">
      <tr>
        <td port="plusone" border="0">{ oper: "add", value: 1 }</td>
        <td border="0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
        <td port="plusthree" border="0">{ oper: "times", value: 2 }</td>
      </tr>
    </table>
  >]

  scan [shape="plaintext", label=<
    <table border="0">
      <tr>
        <td align='left'>var otherStream = scan(function(model, obj) {</td>
      </tr>
      <tr>
        <td align='left'>    // use obj oper and value to update and return the model</td>
      </tr>
      <tr>
        <td align='left'>}, 10, update);</td>
      </tr>
    </table>
  >]

  thescanstream [shape="plaintext", style="filled", fillcolor="orange", label=<
    <table border="1">
      <tr>
        <td border="0" port="initial">10</td>
        <td border="0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
        <td border="0" port="one">11</td>
        <td border="0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
        <td border="0" port="four">22</td>
      </tr>
    </table>
  >]

  scan0 [shape="none", style="filled", fillcolor="yellow", label="initial"]
  scan1 [shape="none", style="filled", fillcolor="yellow", label="function(10, { oper: \"add\", value: 1 })\nreturn 11;"]
  scan2 [shape="none", style="filled", fillcolor="yellow", label="function(11, { oper: \"times\", value: 2 })\nreturn 22;"]

  updateplus1 -> thestream:plusone
  updateplus3 -> thestream:plusthree
  stream -> thestream [label="        "]

  thescanstream -> scan [dir="back"]

  scan0 -> thescanstream:initial
  scan1 -> thescanstream:one
  scan2 -> thescanstream:four

  scan1 -> thescanstream:initial
  scan2 -> thescanstream:one

  thestream:plusone -> scan1 [dir="back"]
  thestream:plusthree -> scan2 [dir="back"]

  {rank="same"; stream thestream}
}
